import strutils

const crc32_table = [
    0x00000000u32, 0x04C11DB7u32, 0x09823B6Eu32, 0x0D4326D9u32, 0x130476DCu32, 0x17C56B6Bu32, 0x1A864DB2u32, 0x1E475005u32,  #   0 [0x00 .. 0x07]
    0x2608EDB8u32, 0x22C9F00Fu32, 0x2F8AD6D6u32, 0x2B4BCB61u32, 0x350C9B64u32, 0x31CD86D3u32, 0x3C8EA00Au32, 0x384FBDBDu32,  #   8 [0x08 .. 0x0F]
    0x4C11DB70u32, 0x48D0C6C7u32, 0x4593E01Eu32, 0x4152FDA9u32, 0x5F15ADACu32, 0x5BD4B01Bu32, 0x569796C2u32, 0x52568B75u32,  #  16 [0x10 .. 0x17]
    0x6A1936C8u32, 0x6ED82B7Fu32, 0x639B0DA6u32, 0x675A1011u32, 0x791D4014u32, 0x7DDC5DA3u32, 0x709F7B7Au32, 0x745E66CDu32,  #  24 [0x18 .. 0x1F]
    0x9823B6E0u32, 0x9CE2AB57u32, 0x91A18D8Eu32, 0x95609039u32, 0x8B27C03Cu32, 0x8FE6DD8Bu32, 0x82A5FB52u32, 0x8664E6E5u32,  #  32 [0x20 .. 0x27]
    0xBE2B5B58u32, 0xBAEA46EFu32, 0xB7A96036u32, 0xB3687D81u32, 0xAD2F2D84u32, 0xA9EE3033u32, 0xA4AD16EAu32, 0xA06C0B5Du32,  #  40 [0x28 .. 0x2F]
    0xD4326D90u32, 0xD0F37027u32, 0xDDB056FEu32, 0xD9714B49u32, 0xC7361B4Cu32, 0xC3F706FBu32, 0xCEB42022u32, 0xCA753D95u32,  #  48 [0x30 .. 0x37]
    0xF23A8028u32, 0xF6FB9D9Fu32, 0xFBB8BB46u32, 0xFF79A6F1u32, 0xE13EF6F4u32, 0xE5FFEB43u32, 0xE8BCCD9Au32, 0xEC7DD02Du32,  #  56 [0x38 .. 0x3F]
    0x34867077u32, 0x30476DC0u32, 0x3D044B19u32, 0x39C556AEu32, 0x278206ABu32, 0x23431B1Cu32, 0x2E003DC5u32, 0x2AC12072u32,  #  64 [0x40 .. 0x47]
    0x128E9DCFu32, 0x164F8078u32, 0x1B0CA6A1u32, 0x1FCDBB16u32, 0x018AEB13u32, 0x054BF6A4u32, 0x0808D07Du32, 0x0CC9CDCAu32,  #  72 [0x48 .. 0x4F]
    0x7897AB07u32, 0x7C56B6B0u32, 0x71159069u32, 0x75D48DDEu32, 0x6B93DDDBu32, 0x6F52C06Cu32, 0x6211E6B5u32, 0x66D0FB02u32,  #  80 [0x50 .. 0x57]
    0x5E9F46BFu32, 0x5A5E5B08u32, 0x571D7DD1u32, 0x53DC6066u32, 0x4D9B3063u32, 0x495A2DD4u32, 0x44190B0Du32, 0x40D816BAu32,  #  88 [0x58 .. 0x5F]
    0xACA5C697u32, 0xA864DB20u32, 0xA527FDF9u32, 0xA1E6E04Eu32, 0xBFA1B04Bu32, 0xBB60ADFCu32, 0xB6238B25u32, 0xB2E29692u32,  #  96 [0x60 .. 0x67]
    0x8AAD2B2Fu32, 0x8E6C3698u32, 0x832F1041u32, 0x87EE0DF6u32, 0x99A95DF3u32, 0x9D684044u32, 0x902B669Du32, 0x94EA7B2Au32,  # 104 [0x68 .. 0x6F]
    0xE0B41DE7u32, 0xE4750050u32, 0xE9362689u32, 0xEDF73B3Eu32, 0xF3B06B3Bu32, 0xF771768Cu32, 0xFA325055u32, 0xFEF34DE2u32,  # 112 [0x70 .. 0x77]
    0xC6BCF05Fu32, 0xC27DEDE8u32, 0xCF3ECB31u32, 0xCBFFD686u32, 0xD5B88683u32, 0xD1799B34u32, 0xDC3ABDEDu32, 0xD8FBA05Au32,  # 120 [0x78 .. 0x7F]
    0x690CE0EEu32, 0x6DCDFD59u32, 0x608EDB80u32, 0x644FC637u32, 0x7A089632u32, 0x7EC98B85u32, 0x738AAD5Cu32, 0x774BB0EBu32,  # 128 [0x80 .. 0x87]
    0x4F040D56u32, 0x4BC510E1u32, 0x46863638u32, 0x42472B8Fu32, 0x5C007B8Au32, 0x58C1663Du32, 0x558240E4u32, 0x51435D53u32,  # 136 [0x88 .. 0x8F]
    0x251D3B9Eu32, 0x21DC2629u32, 0x2C9F00F0u32, 0x285E1D47u32, 0x36194D42u32, 0x32D850F5u32, 0x3F9B762Cu32, 0x3B5A6B9Bu32,  # 144 [0x90 .. 0x97]
    0x0315D626u32, 0x07D4CB91u32, 0x0A97ED48u32, 0x0E56F0FFu32, 0x1011A0FAu32, 0x14D0BD4Du32, 0x19939B94u32, 0x1D528623u32,  # 152 [0x98 .. 0x9F]
    0xF12F560Eu32, 0xF5EE4BB9u32, 0xF8AD6D60u32, 0xFC6C70D7u32, 0xE22B20D2u32, 0xE6EA3D65u32, 0xEBA91BBCu32, 0xEF68060Bu32,  # 160 [0xA0 .. 0xA7]
    0xD727BBB6u32, 0xD3E6A601u32, 0xDEA580D8u32, 0xDA649D6Fu32, 0xC423CD6Au32, 0xC0E2D0DDu32, 0xCDA1F604u32, 0xC960EBB3u32,  # 168 [0xA8 .. 0xAF]
    0xBD3E8D7Eu32, 0xB9FF90C9u32, 0xB4BCB610u32, 0xB07DABA7u32, 0xAE3AFBA2u32, 0xAAFBE615u32, 0xA7B8C0CCu32, 0xA379DD7Bu32,  # 176 [0xB0 .. 0xB7]
    0x9B3660C6u32, 0x9FF77D71u32, 0x92B45BA8u32, 0x9675461Fu32, 0x8832161Au32, 0x8CF30BADu32, 0x81B02D74u32, 0x857130C3u32,  # 184 [0xB8 .. 0xBF]
    0x5D8A9099u32, 0x594B8D2Eu32, 0x5408ABF7u32, 0x50C9B640u32, 0x4E8EE645u32, 0x4A4FFBF2u32, 0x470CDD2Bu32, 0x43CDC09Cu32,  # 192 [0xC0 .. 0xC7]
    0x7B827D21u32, 0x7F436096u32, 0x7200464Fu32, 0x76C15BF8u32, 0x68860BFDu32, 0x6C47164Au32, 0x61043093u32, 0x65C52D24u32,  # 200 [0xC8 .. 0xCF]
    0x119B4BE9u32, 0x155A565Eu32, 0x18197087u32, 0x1CD86D30u32, 0x029F3D35u32, 0x065E2082u32, 0x0B1D065Bu32, 0x0FDC1BECu32,  # 208 [0xD0 .. 0xD7]
    0x3793A651u32, 0x3352BBE6u32, 0x3E119D3Fu32, 0x3AD08088u32, 0x2497D08Du32, 0x2056CD3Au32, 0x2D15EBE3u32, 0x29D4F654u32,  # 216 [0xD8 .. 0xDF]
    0xC5A92679u32, 0xC1683BCEu32, 0xCC2B1D17u32, 0xC8EA00A0u32, 0xD6AD50A5u32, 0xD26C4D12u32, 0xDF2F6BCBu32, 0xDBEE767Cu32,  # 224 [0xE0 .. 0xE7]
    0xE3A1CBC1u32, 0xE760D676u32, 0xEA23F0AFu32, 0xEEE2ED18u32, 0xF0A5BD1Du32, 0xF464A0AAu32, 0xF9278673u32, 0xFDE69BC4u32,  # 232 [0xE8 .. 0xEF]
    0x89B8FD09u32, 0x8D79E0BEu32, 0x803AC667u32, 0x84FBDBD0u32, 0x9ABC8BD5u32, 0x9E7D9662u32, 0x933EB0BBu32, 0x97FFAD0Cu32,  # 240 [0xF0 .. 0xF7]
    0xAFB010B1u32, 0xAB710D06u32, 0xA6322BDFu32, 0xA2F33668u32, 0xBCB4666Du32, 0xB8757BDAu32, 0xB5365D03u32, 0xB1F740B4u32,  # 248 [0xF8 .. 0xFF]
]

proc toLowerAscii*(c: uint8): uint8 =
  uint8(toLowerAscii(char(c)))

proc crc32*(data: seq[uint8], hash = 0u32): uint32 =
  result = hash
  for c in data:
    result = (result shl 0x8) xor crc32_table[(toLowerAscii(c) xor (result shr 0x18)) and 0xFF]
